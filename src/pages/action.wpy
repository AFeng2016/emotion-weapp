<template>
  <view class="action">
    <camera bindstop="cameraStoped" binderror="fetchCameraScope" device-position="front" flash="off" class="camera">
      <cover-view class="emotion-name">
        <cover-view class="title">{{ emotions[index].name }}</cover-view>
        <cover-view class="tips">{{ emotions[index].desc }}</cover-view>
      </cover-view>
    </camera>
    <progress active active-mode="forwards" percent="{{ percent }}" stroke-width="5" activeColor="#69c3aa" backgroundColor="#ccc"/>
    <button @tap="takePhoto" class="btn" hover-class="btn-hover">拍 照</button>
    <canvas class="canvas" style=" width: {{ canvas.width }}px;height:{{ canvas.height }}px;" canvas-id="action-canvas" />
  </view>
</template>
<script>
// 表演页面
import wepy from 'wepy';
import { BaseURL } from '../config';

export default class Action extends wepy.page {
  config = {
    disableScroll: true,
    enablePullDownRefresh: false,
    navigationBarTitleText: '开始表演',
    navigationBarBackgroundColor: '#69c3aa'
  };

  data = {
    emotions: [], // 表情
    index: 0, // 当前拍照进度索引
    // 绘图相关设定
    canvas: {
      points: [], // 照片画放在canvas上的位置
      x: 0, // X轴起点
      y: 0, // Y轴起点
      margin: 5, // 外边距
      inWidth: 0, // 照片在canvas上的宽度
      inHeight: 0, // 照片在canvas上的高度
      num: 3, // 每排存放张数
      width: 250, // 画布宽度
      height: 320, // 画布高度
      ctx: {} // canvas 画布实例
    }
  };

  methods = {
    // 拍照
    takePhoto() {
      wepy.showLoading({ title: '沉醉中 ...', mask: true });
      const camera = wepy.createCameraContext();
      camera.takePhoto({
        quality: 'low', // high | normal | low
        success: res => {
          this.drawInCanvas(res.tempImagePath, () => {
            this.index++; // 进入下一个任务
            this.$apply();
            if (this.complete()) {
              // 保存图片
              wepy.canvasToTempFilePath({
                x: 0,
                y: 0,
                quality: 0.5,
                canvasId: 'action-canvas',
                success: res => {
                  this.submit(res.tempFilePath);
                },
                fail: err => {
                  wepy.hideLoading();
                }
              });
            } else {
              wepy.hideLoading();
            }
          });
        },
        fail: err => {
          this.remaindingRestars();
        }
      });
    },

    // 获取摄像机权限
    fetchCameraScope() {
      const duration = 1500;
      wepy.showToast({
        duration,
        title: '同意授权才能带你装逼带你飞',
        icon: 'none'
      });

      setTimeout(() => {
        wepy.openSetting({
          success: res => {
            if (res.authSetting['scope.camera']) {
              wepy.redirectTo({ url: '/pages/action' });
            }
          }
        });
      }, duration + 500);
    },

    // 摄像头意外终止
    cameraStoped() {
      this.remaindingRestars();
    }
  };

  // 提醒重启
  remaindingRestars() {
    wepy.showToast({
      title: '开了个小差 重启我试试吧',
      icon: 'none'
    });
  }

  // 把照片画到画布
  drawInCanvas(path, callback) {
    const point = this.canvas.points[this.index];
    if (!point) return;

    // 画图
    this.canvas.ctx.drawImage(
      path,
      point.x,
      point.y,
      this.canvas.inWidth,
      this.canvas.inHeight
    );

    const emotion = this.emotions[this.index];
    if (!emotion) return;
    // 写字
    this.canvas.ctx.fillText(
      emotion.name,
      point.x + this.canvas.inWidth / 2,
      point.y + this.canvas.inHeight - 5
    );

    this.canvas.ctx.draw(true, callback);
  }

  // 重置拍照
  reset() {
    this.index = this.canvas.x = this.canvas.y = 0;
    this.canvas.ctx = wepy.createCanvasContext('action-canvas');
    // 填充背景颜色
    this.canvas.ctx.setFillStyle('#fff');
    this.canvas.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

    this.canvas.ctx.setFontSize(12);
    this.canvas.ctx.setTextAlign('center');
  }

  async submit(filePath) {
    wepy.showLoading({ title: '专家评审中...', mask: true });

    // 上传数据
    wepy.uploadFile({
      name: 'image',
      filePath,
      url: `${BaseURL}/auth/actions`,
      header: await this.$parent.authHeader(),
      success: res => {
        const data = JSON.parse(res.data);
        // wepy.hideLoading();
        wepy.showLoading({ title: '瞻仰中 ...', mask: true });
        this.reset();
        if (data.pass) {
          // 评价通过
          // wepy.redirectTo({ url: `/pages/preview?action=${data.id}` });
          wepy.previewImage({
            urls: [data.src], // 需要预览的图片http链接列表
            complete: () => {
              wepy.hideLoading();
            }
          });
        } else {
          // 评价失败
          if (data.message) this.showMessage(data.message);
        }
      },
      fail: err => {
        // dev: 上传数据失败
      },
      complete: () => {
        wepy.hideLoading();
      }
    });
  }

  // 评价失败 展示失败原因
  // dev: should delete with go code
  showMessage(msg) {
    wepy.showModal({
      title: '注意啦',
      confirmText: '再来一次',
      content: msg,
      success: res => {
        if (res.confirm) {
          console.log('用户点击确定');
        } else if (res.cancel) {
          console.log('用户点击取消');
        }
      }
    });
  }

  // 判断是否拍照完成
  complete() {
    return this.index >= this.emotions.length;
  }

  computed = {
    // 计算进度百分比
    percent() {
      return Math.round(this.index * 100 / this.emotions.length);
    }
  };

  // 计算照片的位置信息
  async fetchPoints() {
    const res = wepy.getSystemInfoSync();

    const num = 8; // 图片数量 不包括二维码
    const margin = 5; // 外边距
    const cloNum = 3; // 列数
    const rowNum = Math.ceil((num + 1) / cloNum); // 把二维码的空间算上

    const photoWidth = res.windowWidth;
    const photoHeight = res.windowHeight * 80 / 100; // 高度百分比请于css保持一致
    this.canvas.inWidth = Math.round(
      (this.canvas.width - margin * (cloNum + 1)) / cloNum
    );
    this.canvas.inHeight = Math.round(
      this.canvas.inWidth / photoWidth * photoHeight
    );
    this.canvas.height = this.canvas.inHeight * rowNum + margin * (rowNum + 1);

    for (let i = 0; i < rowNum; i++) {
      for (let k = 0; k < cloNum; k++) {
        this.canvas.points.push({
          x: (k + 1) * margin + k * this.canvas.inWidth,
          y: (i + 1) * margin + i * this.canvas.inHeight
        });
      }
    }

    // set qrcode point
    const key = Math.ceil(num / 2);
    const point = this.canvas.points.splice(key, 1)[0];
    if (!point) return;

    const path = await this.$parent.getAppCode();

    this.canvas.ctx.drawImage(
      path,
      point.x,
      // point.y,
      point.y + Math.abs(this.canvas.inHeight - this.canvas.inWidth) / 2,
      this.canvas.inWidth,
      this.canvas.inWidth
    );
    // this.canvas.ctx.save();
    // this.canvas.ctx.setFontSize(6);
    // this.canvas.ctx.setFillStyle('#69c3aa');
    // this.canvas.ctx.fillText(
    //   '长按识别二维码',
    //   point.x + this.canvas.inWidth / 2,
    //   point.y + this.canvas.inHeight - 13
    // );
    // this.canvas.ctx.fillText(
    //   '试试你的演技值多少分',
    //   point.x + this.canvas.inWidth / 2,
    //   point.y + this.canvas.inHeight - 5
    // );
    // this.canvas.ctx.restore();

    this.canvas.ctx.draw(true);
  }

  onLoad() {
    wepy.request({
      method: 'GET',
      url: `${BaseURL}/emotions`,
      success: res => {
        if (res.data.emotions) {
          this.emotions = [...res.data.emotions];
          this.$apply();
        }
      }
    });

    this.fetchPoints();
  }

  onShow() {
    this.reset();
  }
}
</script>

<style lang="less">
@import '../variables';

.action {
  position: relative;
  height: 100vh;
  width: 100%;
  overflow: hidden;
}

.canvas {
  position: absolute;
  top: 200%;
}

.camera {
  width: 100%;
  height: 80%; // 请于js保持一致
}

.emotion-name {
  text-align: center;
  position: relative;
  top: 700rpx;
}

.title {
  color: @green;
  padding: 40rpx;
  font-size: 24pt;
  font-weight: bold;
  text-align: center;
  letter-spacing: 20rpx;
}

.tips {
  color: @green;
  font-size: 16pt;
  text-align: center;
}
</style>

