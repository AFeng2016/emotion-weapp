<template>
  <view class="action">
    <camera binderror="userRefuse" device-position="front" flash="off" class="camera">
       <cover-view class="emotion-name">
        <cover-view class="title">{{ emotions[current].Name }}</cover-view>
        <cover-view class="tips">{{ emotions[current].Desc }}</cover-view>
      </cover-view>
    </camera>
    <progress active active-mode="forwards" percent="{{ percent }}" stroke-width="5" activeColor="#69c3aa" backgroundColor="#ccc"/>
    <button @tap="takePhoto" class="btn" hover-class="btn-hover">拍 照</button>
    <canvas class="canvas" style=" width: {{ canvas.width }}px;height:{{ canvas.height }}px;" canvas-id="action-canvas" />
  </view>
</template>
<script>
// 表演页面
import wepy from 'wepy';
import { BaseURL } from '../config';

export default class Action extends wepy.page {
  config = {
    disableScroll: true,
    enablePullDownRefresh: false,
    navigationBarTitleText: '开始表演',
    navigationBarBackgroundColor: '#69c3aa'
  };

  data = {
    emotions: [], // 表情
    current: 0, // 当前拍照进度索引

    // 绘图相关设定
    canvas: {
      x: 0, // X轴起点
      y: 0, // Y轴起点
      margin: 5, // 外边距
      num: 3, // 每排存放张数
      width: 250, // 画布宽度
      height: 360, // 画布高度
      ctx: null // canvas 画布实例
    }
  };

  methods = {
    // 拍照
    takePhoto() {
      wepy.showLoading({ title: '沉醉中 ...', mask: true });
      const camera = wepy.createCameraContext();
      camera.takePhoto({
        quality: 'high',
        success: res => {
          if (this.current === Math.round(this.emotions.length / 2)) {
            // 中间画小程序码
            this.drawlInCanvas(
              '/images/appcode.jpg',
              res.width,
              res.height,
              () => {
                this.drawlInCanvas(
                  res.tempImagePath,
                  res.width,
                  res.height,
                  () => {
                    this.current++; // 进入下一个任务
                    this.$apply();
                    if (this.complete()) {
                      // 保存图片
                      wepy.canvasToTempFilePath({
                        x: 0,
                        y: 0,
                        quality: 0.5,
                        canvasId: 'action-canvas',
                        success: res => {
                          this.submit(res.tempFilePath);
                        },
                        fail: err => {
                          wepy.hideLoading();
                        }
                      });
                    } else {
                      wepy.hideLoading();
                    }
                  }
                );
              }
            );
          } else {
            this.drawlInCanvas(
              res.tempImagePath,
              res.width,
              res.height,
              res => {
                this.current++; // 进入下一个任务
                this.$apply();
                if (this.complete()) {
                  // 保存图片
                  wepy.canvasToTempFilePath({
                    x: 0,
                    y: 0,
                    quality: 0.5,
                    canvasId: 'action-canvas',
                    success: res => {
                      this.submit(res.tempFilePath);
                    },
                    fail: err => {
                      wepy.hideLoading();
                    }
                  });
                } else {
                  wepy.hideLoading();
                }
              }
            );
          }
        },
        fail: err => {
          //
        }
      });
    },

    // 用户拒绝调用摄像头
    userRefuse(event) {
      wepy.showToast({
        title: '请同意授权我们才能提供更好的服务',
        icon: 'none',
        duration: 2000
      });
    },

    // 重拍
    reTake() {
      this.reset();
    }
  };

  // 把照片画到画布
  drawlInCanvas(path, width, height, callback) {
    if (this.current === 0) {
      // 第一次填充背景颜色
      this.canvas.ctx.setFillStyle('#f4f4f4');
      this.canvas.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      this.canvas.ctx.fill();
    }

    const inWidth =
      this.canvas.width / this.canvas.num - this.canvas.margin * 2; // 画布上图片宽度
    const inHeight = Math.round(inWidth / width * height); // 画布上图片高度
    const x = this.canvas.x + this.canvas.margin;
    const y = this.canvas.y + this.canvas.margin;

    this.canvas.ctx.drawImage(path, x, y, inWidth, inHeight);

    // 判断X轴是否还有足够的空白
    const hasSpace =
      this.canvas.width - this.canvas.x - inWidth - this.canvas.margin * 2 >=
      inWidth + this.canvas.margin * 2;
    if (hasSpace) {
      this.canvas.x += inWidth + this.canvas.margin * 2;
    } else {
      this.canvas.x = 0;
      this.canvas.y += inHeight + this.canvas.margin * 2;
    }

    this.canvas.ctx.draw(true, () => {
      callback();
    });
  }

  // 重置拍照
  reset() {
    this.current = this.canvas.x = this.canvas.y = 0;
    this.canvas.ctx = wepy.createCanvasContext('action-canvas');
  }

  // 提交
  submit(filePath) {
    wepy.saveImageToPhotosAlbum({ filePath });
    // 上传图片
    wepy.uploadFile({
      header: this.$parent.authHeader(),
      url: `${BaseURL}/auth/actions`,
      filePath,
      name: 'image',
      success: res => {
        const data = JSON.parse(res.data);
        if (data.pass) {
          // 评价通过
          this.preview(data.url);
        } else {
          // 评价失败
          this.showMessage(data.message);
        }
      },
      fail: err => {
        //
      },
      complete: () => {
        wepy.hideLoading();
      }
    });
  }

  // 评价通过 根据 url 预览图片
  preview(url) {
    // 下载图片
    wepy.downloadFile({
      url,
      success: res => {
        // 预览图片
        wepy.previewImage({
          urls: [res.tempFilePath] // 需要预览的图片http链接列表
        });
      }
    });
  }

  // 评价失败 展示失败原因
  showMessage(msg) {
    wepy.showModal({
      title: '注意啦',
      content: msg,
      success: res => {
        this.reset();
        if (res.confirm) {
          console.log('用户点击确定');
        } else if (res.cancel) {
          console.log('用户点击取消');
        }
      }
    });
  }

  // 判断是否拍照完成
  complete() {
    return this.current >= this.emotions.length;
  }

  computed = {
    // 计算进度百分比
    percent() {
      return Math.round(this.current * 100 / this.emotions.length);
    }
  };

  onLoad() {
    wepy.request({
      method: 'GET',
      header: this.$parent.authHeader(),
      url: `${BaseURL}/auth/actions`,
      success: res => {
        this.emotions = [...res.data.emotions];
        this.$apply();
      }
    });
  }

  onShow() {
    this.reset();
  }
}
</script>

<style lang="less">
@import '../variables';

.action {
  position: relative;
  height: 100%;
  width: 100%;
  overflow: hidden;
}

.canvas {
  position: absolute;
  top: 200%;
}

.camera {
  width: 100%;
  height: 950rpx;
}

.emotion-name {
  text-align: center;
  position: relative;
  top: 700rpx;
}

.title {
  color: @green;
  padding: 40rpx;
  font-size: 24pt;
  font-weight: bold;
  text-align: center;
  letter-spacing: 20rpx;
}

.tips {
  color: @green;
  font-size: 12pt;
  text-align: center;
}
</style>

