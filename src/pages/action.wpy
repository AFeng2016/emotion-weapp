<template>
  <view class="action">
    <camera bindstop="cameraStoped" binderror="userRefused" device-position="front" flash="off" class="camera">
      <cover-view class="emotion-name">
        <cover-view class="title">{{ emotions[current].name }}</cover-view>
        <cover-view class="tips">{{ emotions[current].desc }}</cover-view>
      </cover-view>
    </camera>
    <progress active active-mode="forwards" percent="{{ percent }}" stroke-width="5" activeColor="#69c3aa" backgroundColor="#ccc"/>
    <button @tap="takePhoto" class="btn" hover-class="btn-hover">拍 照</button>
    <canvas class="canvas" style=" width: {{ canvas.width }}px;height:{{ canvas.height }}px;" canvas-id="action-canvas" />
  </view>
</template>
<script>
// 表演页面
import wepy from 'wepy';
import { BaseURL } from '../config';

export default class Action extends wepy.page {
  config = {
    disableScroll: true,
    enablePullDownRefresh: false,
    navigationBarTitleText: '开始表演',
    navigationBarBackgroundColor: '#69c3aa'
  };

  data = {
    emotions: [], // 表情
    current: 0, // 当前拍照进度索引
    cameraScope: false, // 是否有摄像头权限
    // 绘图相关设定
    canvas: {
      points: [], // 照片画放在canvas上的位置
      x: 0, // X轴起点
      y: 0, // Y轴起点
      margin: 5, // 外边距
      num: 3, // 每排存放张数
      width: 250, // 画布宽度
      height: 320, // 画布高度
      ctx: null // canvas 画布实例
    }
  };

  methods = {
    // 拍照
    takePhoto() {
      // 判断权限
      if (!this.cameraScope) {
        this.fetchCameraScope();
        return;
      }

      wepy.showLoading({ title: '沉醉中 ...', mask: true });
      const camera = wepy.createCameraContext();
      camera.takePhoto({
        quality: 'low', // high | normal | low
        success: res => {
          if (this.current === Math.round(this.emotions.length / 2)) {
            // 中间画小程序码
            this.drawInCanvas(
              '/images/appcode.jpg',
              res.width,
              res.height,
              () => {
                this.drawInCanvas(
                  res.tempImagePath,
                  res.width,
                  res.height,
                  () => {
                    this.current++; // 进入下一个任务
                    this.$apply();
                    if (this.complete()) {
                      // 保存图片
                      wepy.canvasToTempFilePath({
                        x: 0,
                        y: 0,
                        quality: 0.5,
                        canvasId: 'action-canvas',
                        success: res => {
                          this.submit(res.tempFilePath);
                        },
                        fail: err => {
                          wepy.hideLoading();
                        }
                      });
                    } else {
                      wepy.hideLoading();
                    }
                  }
                );
              }
            );
          } else {
            this.drawInCanvas(res.tempImagePath, res.width, res.height, res => {
              this.current++; // 进入下一个任务
              this.$apply();
              if (this.complete()) {
                // 保存图片
                wepy.canvasToTempFilePath({
                  x: 0,
                  y: 0,
                  quality: 0.5,
                  canvasId: 'action-canvas',
                  success: res => {
                    this.submit(res.tempFilePath);
                  },
                  fail: err => {
                    wepy.hideLoading();
                  }
                });
              } else {
                wepy.hideLoading();
              }
            });
          }
        },
        fail: err => {
          this.remaindingRestars();
        }
      });
    },

    // 用户拒绝调用摄像头
    userRefused(event) {
      this.fetchCameraScope();
    },

    // 摄像头意外终止
    cameraStoped() {
      this.remaindingRestars();
    }
  };

  // 获取摄像机权限
  fetchCameraScope() {
    const duration = 1500;
    wepy.showToast({
      duration,
      title: '同意授权才能带你装逼带你飞',
      icon: 'none'
    });

    setTimeout(() => {
      wepy.openSetting({
        success: res => {
          if (res.authSetting['scope.camera']) {
            wepy.redirectTo({ url: '/pages/index' });
          }
        }
      });
    }, duration + 500);
  }

  // 提醒重启
  remaindingRestars() {
    wepy.showToast({
      title: '开了个小差 重启我试试吧',
      icon: 'none'
    });
  }

  // 把照片画到画布
  drawInCanvas(path, width, height, callback) {
    if (this.current === 0) {
      // 第一次填充背景颜色
      this.canvas.ctx.setFillStyle('#fff');
      this.canvas.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      this.canvas.ctx.fill();
    }

    const inWidth =
      (this.canvas.width - this.canvas.margin) / this.canvas.num -
      this.canvas.margin; // 画布上图片宽度
    const inHeight = Math.round(inWidth / width * height); // 画布上图片高度
    const x = this.canvas.x + this.canvas.margin;
    const y = this.canvas.y + this.canvas.margin;

    this.canvas.ctx.drawImage(path, x, y, inWidth, inHeight); // 画图

    // 写字

    // 判断X轴是否还有足够的空白
    const hasSpace =
      this.canvas.width - this.canvas.x - inWidth - this.canvas.margin >=
      inWidth + this.canvas.margin;
    if (hasSpace) {
      this.canvas.x += inWidth + this.canvas.margin;
    } else {
      this.canvas.x = 0;
      this.canvas.y += inHeight + this.canvas.margin;
    }

    this.canvas.ctx.draw(true, () => {
      callback();
    });
  }

  // 重置拍照
  reset() {
    this.current = this.canvas.x = this.canvas.y = 0;
    this.canvas.ctx = wepy.createCanvasContext('action-canvas');
  }

  async submit(filePath) {
    wepy.showLoading({ title: '专家评审中...', mask: true });

    // 上传图片
    wepy.uploadFile({
      header: await this.$parent.authHeader(),
      url: `${BaseURL}/auth/actions`,
      filePath,
      name: 'image',
      success: res => {
        const data = JSON.parse(res.data);
        wepy.hideLoading();
        this.reset();
        if (data.pass) {
          // 评价通过
          wepy.redirectTo({ url: `/pages/preview?action=${data.id}` });
        } else {
          // 评价失败
          if (data.message) this.showMessage(data.message);
        }
      },
      fail: err => {
        //
      },
      complete: () => {
        wepy.hideLoading();
      }
    });
  }

  // 评价失败 展示失败原因
  showMessage(msg) {
    wepy.showModal({
      title: '注意啦',
      confirmText: '再来一次',
      content: msg,
      success: res => {
        if (res.confirm) {
          console.log('用户点击确定');
        } else if (res.cancel) {
          console.log('用户点击取消');
        }
      }
    });
  }

  // 判断是否拍照完成
  complete() {
    return this.current >= this.emotions.length;
  }

  computed = {
    // 计算进度百分比
    percent() {
      return Math.round(this.current * 100 / this.emotions.length);
    }
  };

  // 获取相机授权
  getCameraScope() {
    wepy.getSetting({
      success: res => {
        this.cameraScope = res.authSetting['scope.camera'] ? true : false;
        this.$apply();
      }
    });
  }

  // 计算照片的位置信息
  fetchPoints() {
    const res = wepy.getSystemInfoSync();

    const num = 8; // 图片数量 不包括二维码
    const margin = 5; // 外边距
    const cloNum = 3; // 列数
    const rowNum = Math.ceil((num + 1) / cloNum); // 把二维码的空间算上

    const photoWidth = res.windowWidth;
    const photoHeight = res.windowHeight * 80 / 100; // 高度请于css保持一致
    const inWidth = (this.canvas.width - margin * (cloNum + 1)) / cloNum;
    const inHeight = inWidth / photoWidth * photoHeight;
    this.canvas.height = inHeight * rowNum + margin * (rowNum + 1);

    for (let i = 0; i < rowNum; i++) {
      for (let k = 0; k < cloNum; k++) {
        this.canvas.points.push([
          (k + 1) * margin + k * inWidth,
          (i + 1) * margin + i * inHeight
        ]);
      }
    }

    console.log(this.canvas.points);
  }

  async onLoad() {
    wepy.request({
      method: 'GET',
      header: await this.$parent.authHeader(),
      url: `${BaseURL}/auth/actions`,
      success: res => {
        this.emotions = [...res.data.emotions];
        this.$apply();
      }
    });

    this.fetchPoints();
    this.getCameraScope();
  }

  onShow() {
    this.reset();
  }
}
</script>

<style lang="less">
@import '../variables';

.action {
  position: relative;
  height: 100vh;
  width: 100%;
  overflow: hidden;
}

.canvas {
  position: absolute;
  top: 200%;
}

.camera {
  width: 100%;
  height: 80%; // 请于js保持一致
}

.emotion-name {
  text-align: center;
  position: relative;
  top: 700rpx;
}

.title {
  color: @green;
  padding: 40rpx;
  font-size: 24pt;
  font-weight: bold;
  text-align: center;
  letter-spacing: 20rpx;
}

.tips {
  color: @green;
  font-size: 16pt;
  text-align: center;
}
</style>

